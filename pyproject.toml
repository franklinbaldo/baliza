[project]
name = "baliza"
version = "0.1.0"
description = "BALIZA: Backup Aberto de Licitações Zelando pelo Acesso - Historical archive of Brazilian public procurement data"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "typer", # Modern CLI framework - ADR-005
    "duckdb", # Primary database for analytics - ADR-001
    "httpx", # HTTP/2 client for API requests - ADR-005
    "h2", # HTTP/2 support for httpx - ADR-005
    "pandas>=2.3.1",
    "orjson", # Fast JSON parsing with fallback
    "aiolimiter>=1.2.1",
    "filelock", # File locking to prevent database conflicts - ADR-001
    "anthropic", # Client for Claude LLM - ADR-007
    "fastmcp", # MCP Server library - ADR-007
    "pyarrow", # Parquet engine for pandas and duckdb - ADR-001
    "tenacity>=9.1.2", # Resilient extraction with retries - ADR-002
    "pydantic>=2.0",             # Runtime data validation
    "pydantic-settings>=2.0",   # Environment-aware configuration
    "internetarchive",          # For uploading data to Internet Archive
    "rich>=13.7.0",             # Enhanced terminal UI
    "textual>=0.41.0",          # Interactive terminal applications
    "questionary>=2.0.1",       # Beautiful command-line prompts
    "tabulate>=0.9.0",          # Enhanced table formatting
]

[project.scripts]
baliza = "baliza.cli:app"

[project.optional-dependencies]
dev = [
    "pytest",
]
analytics = [
    "dbt-core>=1.7.0", # Medallion architecture transformation - ADR-003
    "dbt-duckdb>=1.7.0", # DuckDB adapter for dbt - ADR-001, ADR-003
]
dbt = [
    "dbt-core>=1.7.0",
    "dbt-duckdb>=1.7.0",
]

[dependency-groups]
dev = [
    "mypy>=1.16.1",
    "pre-commit>=4.2.0",
    "pytest>=8.4.1", # E2E testing framework - ADR-004
    "ruff>=0.12.3", # Fast linting and formatting - ADR-005
    "mkdocs-material>=9.1.21",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "pytest-asyncio>=1.1.0",
]

# Ruff configuration for linting and formatting - ADR-005
[tool.ruff]
target-version = "py311"
line-length = 88

# Exclude specific files/directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
    "*.pyi",
]

# Output configuration
output-format = "grouped"

[tool.ruff.lint]
select = [
    # Error
    "E",
    # Warning  
    "W",
    # Pyflakes
    "F",
    # pycodestyle
    "E", "W",
    # mccabe
    "C90",
    # isort
    "I",
    # pep8-naming
    "N",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-bandit
    "S",
    # flake8-blind-except
    "BLE",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH",
    # pandas-vet
    "PD",
    # tryceratops
    "TRY",
    # Ruff-specific rules
    "RUF",
]

ignore = [
    # Too aggressive
    "S101",  # Use of assert
    "S603",  # subprocess call - check for execution of untrusted input
    "S607",  # Starting a process with a partial executable path
    "TRY003", # Avoid specifying long messages outside the exception class
    "B008",  # Do not perform function calls in argument defaults
    "S608",  # Possible SQL injection vector (we use DuckDB safely)
    "BLE001", # Do not catch blind exception (sometimes needed)
    # Conflicts with formatter
    "E501",  # Line too long
    "W191",  # Indentation contains tabs
    "E111",  # Indentation is not a multiple of 4
    "E114",  # Indentation is not a multiple of 4 (comment)
    "E117",  # Over-indented
    "D206",  # Docstring should be indented with spaces
    "D300",  # Use """triple double quotes"""
    "Q000",  # Single quotes found but double quotes preferred
    "Q001",  # Single quote multiline found but triple quotes preferred
    "Q002",  # Single quote docstring found but triple quotes preferred
    "Q003",  # Change outer quotes to avoid escaping inner quotes
    "COM812", # Missing trailing comma
    "COM819", # Prohibited trailing comma
    "ISC001", # Implicitly concatenated string literals on one line
    "ISC002", # Implicitly concatenated string literals over continuation lines
]

[tool.ruff.lint.mccabe]
# Maximum cyclomatic complexity
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["baliza"]
known-third-party = [
    "duckdb",
    "httpx",
    "typer",
    "pytest",
    "rich",
]
section-order = [
    "future",
    "standard-library", 
    "third-party",
    "first-party",
    "local-folder"
]

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["classmethod", "pydantic.validator"]

[tool.ruff.lint.flake8-bandit]
# S101: Use of assert
check-typed-exception = true

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

# Mypy configuration for type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Be less strict for some patterns
[[tool.mypy.overrides]]
module = [
    "tests.*",
    "scripts.*"
]
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false

# External library stubs
[[tool.mypy.overrides]]
module = [
    "duckdb.*",
    "httpx.*",
    "typer.*",
    "rich.*"
]
ignore_missing_imports = true

# Pytest configuration for E2E tests only - ADR-004
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
addopts = "-v --tb=short --strict-markers"
markers = [
    "e2e: marks tests as end-to-end integration tests",
    "slow: marks tests as slow (may take several minutes)",
]
# Default to running only E2E tests - ADR-004
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration for pytest-cov
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Build system configuration
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

# Package discovery
[tool.setuptools.packages.find]
where = ["src"]
include = ["baliza*"]
exclude = ["tests*"]
